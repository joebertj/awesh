exit# awesh - AI-Aware Interactive Shell

![awesh](awesh.png)

**awesh** is an AI-aware interactive shell that provides intelligent assistance while preserving all the power and familiarity of traditional bash operations.

## ‚ö° Quickstart - Get awesh Running Fast

### üöÄ One-Command Installation
```bash
# Clone and install awesh
git clone https://github.com/joebertj/awesh.git
cd awesh
python3 deployment_mcp.py clean_install
```

### üîë Configure Your API Key
```bash
# Set your OpenAI API key
export OPENAI_API_KEY=your_api_key_here
export OPENAI_MODEL=gpt-5

# Optional: Use OpenRouter instead
export AI_PROVIDER=openrouter
export OPENROUTER_API_KEY=your_openrouter_key_here
export OPENROUTER_MODEL=anthropic/claude-3.5-sonnet
```

### üéØ Start Using awesh
```bash
# Launch awesh
awesh

# Try these examples:
> find all files that is recently edited
> show me the system status
> list all python processes
> what's taking up disk space?
```

### üõ†Ô∏è Development Workflow
```bash
# Fast development cycle with Deployment MCP
python3 deployment_mcp.py build_clean    # Build only
python3 deployment_mcp.py deploy_only    # Deploy only
python3 deployment_mcp.py clean_install  # Full cycle
```

### üîß Configuration
```bash
# Edit ~/.aweshrc for persistent settings
VERBOSE=1                    # 0=silent, 1=info, 2=debug
AI_PROVIDER=openai          # openai or openrouter
MODEL=gpt-5                 # AI model to use
```

### üéÆ Control Commands
```bash
# Inside awesh
aweh                        # Show help and all available commands
awes                        # Show verbose status (API provider, model, debug state)
awea                        # Show current AI provider and model
awea openai                 # Switch to OpenAI
awea openrouter             # Switch to OpenRouter
awem                        # Show current model
awem gpt-4                  # Set model to GPT-4
awem gpt-3.5-turbo          # Set model to GPT-3.5 Turbo
awem claude-3               # Set model to Claude 3
awev                        # Show verbose level
awev 0/1/2                  # Set verbose level
awev on/off                 # Enable/disable verbose
```

**That's it!** You now have AI-powered shell assistance with security middleware, intelligent command routing, and full bash compatibility.

## üìñ Related Reading

**[AIOps: Artificial Intelligence for IT Operations](https://www.amazon.com/dp/B0FNKKXFPQ)** - A comprehensive guide to the AI revolution in IT operations, documenting real-world transformations and practical implementation strategies. Written by the creator of this toolkit, it provides the theoretical foundation and strategic insights behind these tools.

## üêö awesh - AIWES (Awe-Inspired Workspace Environment Shell)
*"AI by default, Bash when I mean Bash"*

**üíé Naming Inspiration:**
awesh draws its name from my eldest daughter, **Awit Perl** - where "Awit" means "Psalm" in Filipino, representing both "Awe" and "Wit," while "Perl" means "Pearl" (still more OG than the Python we have today). This shell embodies the same wonder and wisdom that inspired its creation.

An intelligent shell that seamlessly blends natural language AI interaction with traditional command-line operations. **Built by Ops, for Ops** - designed for systems administrators, DevOps engineers, and infrastructure professionals who live in the terminal.

**üí° The "Free Cursor" Concept:**
awesh represents what we really want from AI-assisted development: the AI assistance without the IDE bloat. It's a "free cursor" that's purely shell-based - giving you AI-powered development in your terminal without the overhead of editors or opinionated tool prompts.

**üåç Democratizing AI-Powered Development:**
awesh brings the **Cursor/Claude Code experience to every shell**, democratizing AI-assisted development by making it a **shell primitive**, not an editor feature:

- **üöÄ Universal Access**: Any Linux/Unix system becomes AI-powered - no editor lock-in
- **‚ö° Shell-Native AI**: Natural language commands get AI interpretation and auto-execution  
- **üîÑ Intent Recognition**: "read md files" ‚Üí AI understands ‚Üí `ls *.md` ‚Üí Shows results seamlessly
- **üõ†Ô∏è Tool Integration**: Works with vi, nano, grep, git - your existing workflow enhanced
- **üîì Open Ecosystem**: Not dependent on proprietary platforms or specific editors

Instead of being locked into AI editors, **every shell becomes an AI-powered operations environment**. This democratizes access to AI-assisted infrastructure management for anyone with a terminal.

**üîß The Ops-First Philosophy:**
awesh embraces the **minimalistic yet powerful** approach that operations professionals know and love:

- **üñ•Ô∏è Shell + vi Workflow**: Designed for those who live in terminals and edit with vi/vim
- **‚ö° No IDE Bloat**: Pure shell experience - familiar, fast, and efficient
- **üõ†Ô∏è Infrastructure-Focused**: Built for system administration, not application development  
- **üìä Ops Mindset**: Troubleshooting, monitoring, deployment - operations tasks first
- **üîç Minimal Learning Curve**: If you know bash and vi, you know awesh

**For the shell/vi professional** who wants AI assistance without abandoning the minimalistic, powerful tools that make operations efficient.

**üéØ Ideal Test Users:**
A 23-year terminal veteran is the perfect test user for writing an AI-enhanced terminal - not developers who spent time in advanced IDEs pampered by so much GUI tooling. Experienced terminal users understand the real workflow, know what's actually needed, and can identify when AI assistance genuinely enhances rather than complicates the shell experience.

**üåü Core Philosophy:**
- **Zero-Friction AI**: No special syntax - just type naturally
- **Intelligent Routing**: Automatically detects AI vs Bash intent
- **Context-Aware**: Remembers your environment and command history
- **Safety First**: AI suggestions with human control
- **Gradual Adoption**: Works alongside your existing workflow

**üöÄ Key Features:**
- **Smart Command Routing**: Detects shell syntax, commands, and natural language automatically
- **OpenAI Integration**: Powered by GPT-4/GPT-5 with configurable models
- **System Prompt Support**: Customizable AI behavior for your operations context  
- **Streaming Responses**: Real-time AI output with conversation continuity
- **Environment Variable Support**: Easy configuration via `~/.aweshrc`
- **MCP Integration**: Secure tool execution through Model Context Protocol
- **Full Bash Compatibility**: All your existing commands work exactly as before

**üí° Example Usage:**
```bash
awesh> ls -la                              # ‚Üí Sandbox validation ‚Üí Direct execution
awesh> what files are here?                # ‚Üí Sandbox validation ‚Üí AI query via middleware
awesh> find . -name "*.py"                 # ‚Üí Sandbox validation ‚Üí Direct execution  
awesh> explain this error                  # ‚Üí Sandbox validation ‚Üí AI query via middleware
awesh> cat file.txt | grep error           # ‚Üí Sandbox validation ‚Üí Direct execution
awesh> summarize this directory structure  # ‚Üí Sandbox validation ‚Üí AI query via middleware
awesh> why did the build fail?             # ‚Üí Sandbox validation ‚Üí AI query via middleware
awesh> awem gpt-4                          # ‚Üí Built-in command (set model)
awesh> awev 1                              # ‚Üí Built-in command (enable verbose)
```

**"AI by default, Bash when I mean Bash."**

**üîß Installation:**
```bash
# Use deployment MCP for clean installation with virtual environment
python3 deployment_mcp.py clean_install

# Configure your OpenAI API key
export OPENAI_API_KEY=your_api_key_here
awesh
```

**üêç Virtual Environment Enforcement:**
AIOps automatically uses a Python virtual environment for all operations, ensuring:
- **Dependency isolation** from system Python packages
- **Consistent environments** across different systems  
- **Clean deployments** with reproducible setups
- **No conflicts** with system-installed packages

The deployment script automatically creates and manages the virtual environment, installing all dependencies in isolation.

**üîß Configuration:**
Set these environment variables in your shell:

```bash
# AI Provider Configuration
export AI_PROVIDER=openai                    # openai or openrouter
export OPENAI_MODEL=gpt-5                   # Model to use
export OPENAI_API_KEY=sk-proj-abc123...xyz  # Your OpenAI API key (truncated)

# OpenRouter Configuration (if using openrouter)
export OPENROUTER_API_KEY=sk-or-v1-abc...xyz # Your OpenRouter API key (truncated)
export OPENROUTER_MODEL=anthropic/claude-3-sonnet

# Display Options  
export VERBOSE=1              # 0=silent, 1=info, 2=debug (default: 1)

# File Agent Options
export FILE_AGENT_ENABLED=1           # 1=enabled, 0=disabled (default: 1)
# Note: AI prompt enhancement is always enabled for built-in agents
export FILE_AGENT_MAX_FILE_SIZE=50000 # Max size per file in bytes (default: 50000)
export FILE_AGENT_MAX_TOTAL_CONTENT=10000 # Max total content to inject (default: 10000)
export FILE_AGENT_MAX_FILES=5         # Max number of files to include (default: 5)
```

**Example configuration:**
```bash
export AI_PROVIDER=openai
export OPENAI_MODEL=gpt-5
export OPENAI_API_KEY=sk-proj-JrUoBu9D4iCb...T3BlbkFJMEjXf8l0w9SPKE-Rw
export VERBOSE=1
```

**‚ö†Ô∏è Testing Status:**
> **Currently optimized for OpenAI GPT-5**: awesh is actively tested and developed using OpenAI's GPT-5 model. While OpenRouter and other AI providers are supported, they may exhibit unexpected behavior or suboptimal performance. We recommend using OpenAI with GPT-5 for the most reliable experience while we continue testing and improving compatibility with other providers.

**üéõÔ∏è Control Commands:**
```bash
# Help & Status
aweh            # Show all available awesh control commands
awes            # Show verbose status (API provider, model, debug state)
awea            # Show current AI provider and model

# Model Management
awem            # Show current model
awem gpt-4      # Set model to GPT-4
awem gpt-3.5-turbo # Set model to GPT-3.5 Turbo
awem claude-3   # Set model to Claude 3

# Verbose Debug Control
awev            # Show verbose level status
awev 0          # Set verbose level 0 (silent)
awev 1          # Set verbose level 1 (info)
awev 2          # Set verbose level 2 (debug)
awev on         # Enable verbose logging (level 1)
awev off        # Disable verbose logging (level 0)

# AI Provider Switching
awea openai     # Switch to OpenAI (GPT models)
awea openrouter # Switch to OpenRouter (multiple providers)
```

*Control commands use the `awe` prefix to avoid conflicts with bash builtins and create a clean namespace for awesh operations.*

## üìÑ License

This project is open source and available under the Apache License 2.0.

---

*awesh: Where artificial intelligence meets shell operations. Making the complex simple, the manual automatic, and bringing AI assistance to every terminal.*

